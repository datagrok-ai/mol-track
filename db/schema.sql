-- SQL dump generated using DBML (dbml.dbdiagram.io)
-- Database: PostgreSQL
-- Generated at: 2025-05-12T17:56:08.275Z

CREATE SCHEMA moltrack;

CREATE TABLE moltrack.users (
  id uuid PRIMARY KEY NOT NULL,
  email text UNIQUE NOT NULL,
  first_name text NOT NULL,
  last_name text NOT NULL,
  has_password boolean NOT NULL,
  is_active boolean NOT NULL DEFAULT false,
  is_service_account boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id)
);

-- Explains the meaning of a scalar property.
CREATE TABLE moltrack.semantic_types (
  id serial PRIMARY KEY,
  name text NOT NULL, -- e.g., Molecule, Cell, Tissue, Organism, Treatment, Drug, Image...
  description text
);

-- Properties table - for calculated and measured properties
CREATE TABLE moltrack.properties (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  name text NOT NULL,

  -- value_type defines the colummn in the batch_details, assay_details and assay_results 
  -- tables that store the property value:
  -- * [value_num] for "int" and "double", 
  -- * [value_datetime] for "datetime", 
  -- * [value_uuid] for "uuid", 
  -- * [value_string] for "string"
  value_type text check (value_type in ('int', 'double', 'datetime', 'uuid', 'string')) NOT NULL,
  semantic_type_id INTEGER REFERENCES moltrack.semantic_types (id),
  property_class text check (property_class in ('CALCULATED', 'MEASURED', 'PREDICTED')) NOT NULL,
  unit text,
  scope text check (scope in ('BATCH', 'COMPOUND', 'ASSAY', 'SYSTEM')) NOT NULL
);

-- System settings like compound standardization rules, compound uniqueness rules, compound identification rules and synonym generation rules.
CREATE TABLE moltrack.settings (
  id serial PRIMARY KEY,
  name text NOT NULL,
  value text NOT NULL,
  description text NOT NULL
);

-- Synonym types table - for batch and compound synonym types
CREATE TABLE moltrack.synonym_types (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  synonym_level text check (synonym_level in ('BATCH', 'COMPOUND')) NOT NULL,
  name text NOT NULL, -- e.g., CAS, USAN, INN, tradename ,source code
  pattern text, -- regex for identifier: CHEMBL.*
  description text NOT NULL
);

-- Compounds table - unique chemical structures
CREATE TABLE moltrack.compounds (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  canonical_smiles text NOT NULL,               -- RDKit canonical SMILES
  original_molfile text,                        -- as sketched by the chemist
  molregno int UNIQUE NOT NULL,                 -- generated by the system based on business rules
  inchi text NOT NULL,                          -- IUPAC InChI
  inchikey text UNIQUE NOT NULL,                -- IUPAC InChIKey
  formula text NOT NULL,                        -- e.g., C10H16N2O2
  hash_mol uuid UNIQUE NOT NULL,                -- hash of the canonical SMILES
  hash_tautomer uuid UNIQUE NOT NULL,           -- hash of the tautomer
  hash_canonical_smiles uuid UNIQUE NOT NULL,   -- hash of the canonical SMILES
  hash_no_stereo_smiles uuid UNIQUE NOT NULL,   -- hash of the no stereo SMILES
  hash_no_stereo_tautomer uuid UNIQUE NOT NULL, -- hash of the no stereo tautomer
  is_archived boolean DEFAULT false,            -- soft delete
  deleted_at timestamp with time zone,          -- should use current_timestamp
  deleted_by uuid REFERENCES moltrack.users (id) -- can this hand
);

-- Compound synonyms table - for compound synonym types: CAS, USAN, INN, tradename, source code
CREATE TABLE moltrack.compound_synonyms (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  compound_id int NOT NULL REFERENCES moltrack.compounds (id),
  synonym_type_id int NOT NULL REFERENCES moltrack.synonym_types (id),
  synonym_value text NOT NULL
);

-- Compound details table - for calculated and measured properties
CREATE TABLE moltrack.compound_details (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  compound_id int NOT NULL REFERENCES moltrack.compounds (id),
  property_id int NOT NULL REFERENCES moltrack.properties (id),
  value_datetime timestamp with time zone DEFAULT (CURRENT_TIMESTAMP),
  value_uuid uuid,
  value_num float,
  value_string text
);

-- Additions table - for salts and solvates 
CREATE TABLE moltrack.additions (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  name text UNIQUE NOT NULL, -- ex. HCl
  description text,          -- ex. Hydrochloric acid
  code text,                 -- ex. AAC
  is_active boolean DEFAULT true,
  formula text,              -- ex. HCl
  molecular_weight real,     -- ex. 36.46
  smiles text,               -- ex. ClH
  molfile text,
  role text check (role in ('SALT', 'SOLVATE')),
  is_archived boolean DEFAULT false,
  deleted_at timestamp with time zone,
  deleted_by uuid REFERENCES moltrack.users (id) -- can this handle null?
);

-- Batch is a physical sample of the compound (for instance synthesized or procured).
CREATE TABLE moltrack.batches (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  compound_id int NOT NULL REFERENCES moltrack.compounds (id),
  batch_regno int UNIQUE NOT NULL, -- ex. 123456 auto-generated by the system following business rules
  notes text                       -- ex. "Batch of 100 mg of compound"
);

-- Batch additions table - for salts and solvates
CREATE TABLE moltrack.batch_additions (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  batch_id int NOT NULL REFERENCES moltrack.batches (id),
  addition_id int NOT NULL REFERENCES moltrack.additions (id),
  addition_equivalent real NOT NULL DEFAULT 1, -- relative to parent compound ex. 1.0 for 1:1 salt
  unique KEY (batch_id, addition_id)
);

-- Batch details table - for calculated and measured properties
CREATE TABLE moltrack.batch_details (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  batch_id int NOT NULL REFERENCES moltrack.batches (id),
  property_id int NOT NULL REFERENCES moltrack.properties (id),

  value_qualifier smallint NOT NULL DEFAULT 0 check (value_qualifier in (0, 1, 2)), -- 0 for =, 1 for <, 2 for >
  value_datetime timestamp with time zone DEFAULT (CURRENT_TIMESTAMP),
  value_uuid uuid,
  value_num float,
  value_string text
);

-- Batch synonyms table - for batch synonym types: CAS, USAN, INN, tradename, source code
CREATE TABLE moltrack.batch_synonyms (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  batch_id int NOT NULL REFERENCES moltrack.batches (id),
  synonym_type_id int NOT NULL REFERENCES moltrack.synonym_types (id),
  synonym_value text NOT NULL
);

-- Assay types table - for assay types: kinase inhibition, cell viability, etc.
-- this is the level for the protocol such as hepatocyte stability
-- All of the required properties (see assay_type_properties) must be present in the assay results.
CREATE TABLE moltrack.assay_types (
  id serial PRIMARY KEY,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id),
  name text NOT NULL,
  description text
  -- author_id uuid references moltrack.users (id)
);

-- Assay type details table - example domain: in vivo, in vitro, etc., detection method: fluorescence, etc. 
CREATE TABLE moltrack.assay_type_details (
  assay_type_id int NOT NULL REFERENCES moltrack.assay_types (id),
  property_id int NOT NULL REFERENCES moltrack.properties (id),
  required boolean NOT NULL DEFAULT false,

  value_datetime timestamp with time zone,
  value_uuid uuid,
  value_num real,
  value_string text
);

-- Assays table - for assays: kinase inhibition, cell viability, etc.  
-- This is the level of the experiment executed by the user.
CREATE TABLE moltrack.assays (
  id serial PRIMARY KEY,
  assay_type_id int NOT NULL REFERENCES moltrack.assay_types (id),
  name text NOT NULL,
  description text,
  created_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  updated_at timestamp with time zone DEFAULT (CURRENT_TIMESTAMP) NOT NULL,
  created_by uuid NOT NULL REFERENCES moltrack.users (id),
  updated_by uuid NOT NULL REFERENCES moltrack.users (id)
);

-- Assay details table - for calculated and measured properties
-- This is the level of the experiment executed by the user.
-- Details like assayer, eln reference, calculation date
-- experimental conditions like temperature, time, cell lot, protein lot, etc.
CREATE TABLE moltrack.assay_details (
  assay_id int NOT NULL REFERENCES moltrack.assays (id),
  property_id int NOT NULL REFERENCES moltrack.properties (id),

  value_datetime timestamp with time zone DEFAULT (CURRENT_TIMESTAMP),
  value_uuid uuid,
  value_num float,
  value_string text,
  unique KEY (assay_id, property_id)
);

-- Assay type properties table - for assay type properties
-- This should detail the required and optional result types for a given assay type.
-- This is used to validate the data submitted for an assay.
CREATE TABLE moltrack.assay_type_properties (
  assay_type_id int NOT NULL REFERENCES moltrack.assay_types (id),
  property_id int NOT NULL REFERENCES moltrack.properties (id),
  required bool NOT NULL DEFAULT false,
  PRIMARY KEY (assay_type_id, property_id)
);

-- Assay results table - actual measurements: IC50, EC50, etc.
CREATE TABLE moltrack.assay_results (
  id serial PRIMARY KEY,
  batch_id int NOT NULL REFERENCES moltrack.batches (id),
  assay_id int NOT NULL REFERENCES moltrack.assays (id),
  property_id int NOT NULL REFERENCES moltrack.properties (id), -- should appear in assay_type_properties

  -- For performance reasons, only numbers, strings, and booleans are supported for assay results (no datetime or uuid).
  value_qualifier smallint NOT NULL DEFAULT 0 check (value_qualifier in (0, 1, 2)), -- 0 for =, 1 for <, 2 for >
  value_num float,
  value_string text,
  value_bool boolean
);

CREATE UNIQUE INDEX ON moltrack.users (email);

CREATE INDEX ON moltrack.properties (name);

CREATE INDEX ON moltrack.properties (value_type);

CREATE INDEX ON moltrack.properties (semantic_type_id);

CREATE INDEX ON moltrack.properties (property_class);

CREATE UNIQUE INDEX ON moltrack.synonym_types (synonym_level, name);

CREATE INDEX ON moltrack.compounds (canonical_smiles);

CREATE INDEX ON moltrack.compounds (inchi);

CREATE INDEX ON moltrack.compounds (inchikey);

CREATE INDEX ON moltrack.compounds (formula);

CREATE UNIQUE INDEX ON moltrack.compounds (hash_mol);

CREATE UNIQUE INDEX ON moltrack.compounds (hash_tautomer);

CREATE UNIQUE INDEX ON moltrack.compounds (hash_canonical_smiles);

CREATE UNIQUE INDEX ON moltrack.compounds (hash_no_stereo_smiles);

CREATE UNIQUE INDEX ON moltrack.compounds (hash_no_stereo_tautomer);

CREATE UNIQUE INDEX ON moltrack.compounds (molregno);

CREATE INDEX ON moltrack.compound_synonyms (compound_id);

CREATE INDEX ON moltrack.compound_synonyms (synonym_type_id);

CREATE INDEX ON moltrack.compound_details (compound_id);

CREATE INDEX ON moltrack.compound_details (property_id);

CREATE INDEX ON moltrack.additions (name);

CREATE INDEX ON moltrack.additions (code);

CREATE INDEX ON moltrack.additions (formula);

CREATE INDEX ON moltrack.additions (role);

CREATE INDEX ON moltrack.batches (compound_id);

CREATE INDEX ON moltrack.batches (batch_number);

CREATE INDEX ON moltrack.batch_details (batch_id);

CREATE INDEX ON moltrack.batch_details (property_id);

CREATE INDEX ON moltrack.batch_synonyms (batch_id);

CREATE INDEX ON moltrack.batch_synonyms (synonym_type_id);

CREATE UNIQUE INDEX ON moltrack.assay_type_details (assay_type_id, property_id);

CREATE UNIQUE INDEX ON moltrack.assay_details (assay_id, property_id);

CREATE INDEX ON moltrack.assay_results (batch_id);

CREATE INDEX ON moltrack.assay_results (assay_id);

CREATE INDEX ON moltrack.assay_results (property_id);

COMMENT ON TABLE moltrack.users IS 'for MVP, just a single global user will be configured
';

COMMENT ON COLUMN moltrack.semantic_types.name IS 'e.g., Molecule, Cell, ...';

COMMENT ON TABLE moltrack.properties IS 'for validity checking should we have field to specify what entity this should be relevant
future: property should have ontology reference
';

COMMENT ON COLUMN moltrack.properties.value_type IS '(''int'', ''double'', ''bool'', ''datetime'', ''string'')';

COMMENT ON COLUMN moltrack.properties.property_class IS '(''CALCULATED'', ''MEASURED'', ''PREDICTED'')';

COMMENT ON COLUMN moltrack.properties.unit IS 'future: unit should point to unit ontology';

COMMENT ON TABLE moltrack.settings IS 'This table is used to store configuration settings for the application.
examples include:
- compound standardization rules
- compound uniqueness rules
- compound identification rules and synonym generation rules
- batch identification rules and synonym generation rules
I suspect that there should be some more structure to this table, but for MVP, this will be used to store the rules for the global user.
';

COMMENT ON TABLE moltrack.synonym_types IS 'how to address combined uniqueness constraint';

COMMENT ON COLUMN moltrack.synonym_types.synonym_level IS '(''BATCH'',''COMPOUND'')';

COMMENT ON COLUMN moltrack.synonym_types.name IS 'e.g., CAS, USAN, INN, tradename ,source code';

COMMENT ON COLUMN moltrack.synonym_types.pattern IS 'regex for identifier: CHEMBL.*';

COMMENT ON COLUMN moltrack.compounds.canonical_smiles IS 'RDKit canonical SMILES';

COMMENT ON COLUMN moltrack.compounds.original_molfile IS 'as sketched by the chemist';

COMMENT ON COLUMN moltrack.compounds.molregno IS 'generated by the system based on business rules';

COMMENT ON COLUMN moltrack.compounds.inchi IS 'IUPAC InChI';

COMMENT ON COLUMN moltrack.compounds.inchikey IS 'IUPAC InChIKey';

COMMENT ON TABLE moltrack.compound_details IS 'future: compound_details.value_string should have optional ontology reference';

COMMENT ON COLUMN moltrack.compound_details.value_datetime IS 'with time zone';

COMMENT ON TABLE moltrack.additions IS '- Leave to admin to maintain uniqueness.
Questions:
- should we do check constraints for role?
- in the future can add roles for reagents, solvents, etc.
';

COMMENT ON COLUMN moltrack.additions.name IS 'ex. HCl';

COMMENT ON COLUMN moltrack.additions.description IS 'ex. Hydrochloric acid';

COMMENT ON COLUMN moltrack.additions.code IS 'shorthand, ex. AAC';

COMMENT ON COLUMN moltrack.additions.is_active IS 'allows for soft delete';

COMMENT ON COLUMN moltrack.additions.formula IS 'ex. HCl';

COMMENT ON COLUMN moltrack.additions.molecular_weight IS 'ex. 36.46';

COMMENT ON COLUMN moltrack.additions.smiles IS 'ex. ClH';

COMMENT ON COLUMN moltrack.additions.role IS '(''SALT'', ''SOLVATE'')';

COMMENT ON TABLE moltrack.batches IS 'amount, amount_unit, purity could all be added to properties';

COMMENT ON COLUMN moltrack.batches.batch_number IS 'generated by the system based on business rules';

COMMENT ON TABLE moltrack.batch_additions IS 'This allows us to have multiple salt and solvates for a given batch''
';

COMMENT ON COLUMN moltrack.batch_additions.addition_equivalent IS 'equivalent relative to parent batch';

COMMENT ON TABLE moltrack.batch_details IS 'future: batch_details.value_string should have optional ontology reference';

COMMENT ON COLUMN moltrack.batch_details.value_datetime IS 'with time zone';

COMMENT ON TABLE moltrack.assay_type_details IS 'PK: (assay_type_id, property_id)';

COMMENT ON COLUMN moltrack.assay_type_details.value_datetime IS 'timestamp with time zone';

COMMENT ON COLUMN moltrack.assays.name IS 'e.g., Kinase Inhibition Assay';

COMMENT ON TABLE moltrack.assay_details IS 'PK: (assay_id, property_id)';

COMMENT ON COLUMN moltrack.assay_details.value_datetime IS 'with time zone';

COMMENT ON TABLE moltrack.assay_type_properties IS 'A set of measurement types for a given assay type.
This will be used to validate the data submitted for an assay.
';

COMMENT ON COLUMN moltrack.assay_type_properties.required IS 'if true, must exist in submitted data for validation';

COMMENT ON TABLE moltrack.assay_results IS 'For performance reasons, only numbers, strings, and booleans are supported for assay results (no datetime or uuid).';

COMMENT ON COLUMN moltrack.assay_results.value_qualifier IS 'SMALLINT, 0 for =, 1 for <, 2 for >. Only used for numeric properties.';

ALTER TABLE moltrack.properties ADD FOREIGN KEY (semantic_type_id) REFERENCES moltrack.semantic_types (id);

ALTER TABLE moltrack.compound_synonyms ADD FOREIGN KEY (compound_id) REFERENCES moltrack.compounds (id);

ALTER TABLE moltrack.compound_synonyms ADD FOREIGN KEY (synonym_type_id) REFERENCES moltrack.synonym_types (id);

ALTER TABLE moltrack.compound_details ADD FOREIGN KEY (compound_id) REFERENCES moltrack.compounds (id);

ALTER TABLE moltrack.compound_details ADD FOREIGN KEY (property_id) REFERENCES moltrack.properties (id);

ALTER TABLE moltrack.batches ADD FOREIGN KEY (compound_id) REFERENCES moltrack.compounds (id);

ALTER TABLE moltrack.batch_additions ADD FOREIGN KEY (batch_id) REFERENCES moltrack.batches (id);

ALTER TABLE moltrack.batch_additions ADD FOREIGN KEY (addition_id) REFERENCES moltrack.additions (id);

ALTER TABLE moltrack.batch_details ADD FOREIGN KEY (batch_id) REFERENCES moltrack.batches (id);

ALTER TABLE moltrack.batch_details ADD FOREIGN KEY (property_id) REFERENCES moltrack.properties (id);

ALTER TABLE moltrack.batch_synonyms ADD FOREIGN KEY (batch_id) REFERENCES moltrack.batches (id);

ALTER TABLE moltrack.batch_synonyms ADD FOREIGN KEY (synonym_type_id) REFERENCES moltrack.synonym_types (id);

ALTER TABLE moltrack.assay_type_details ADD FOREIGN KEY (assay_type_id) REFERENCES moltrack.assay_types (id);

ALTER TABLE moltrack.assay_type_details ADD FOREIGN KEY (property_id) REFERENCES moltrack.properties (id);

ALTER TABLE moltrack.assays ADD FOREIGN KEY (assay_type_id) REFERENCES moltrack.assay_types (id);

ALTER TABLE moltrack.assay_details ADD FOREIGN KEY (assay_id) REFERENCES moltrack.assays (id);

ALTER TABLE moltrack.assay_details ADD FOREIGN KEY (property_id) REFERENCES moltrack.properties (id);

ALTER TABLE moltrack.assay_type_properties ADD FOREIGN KEY (assay_type_id) REFERENCES moltrack.assay_types (id);

ALTER TABLE moltrack.assay_type_properties ADD FOREIGN KEY (property_id) REFERENCES moltrack.properties (id);

ALTER TABLE moltrack.assay_results ADD FOREIGN KEY (batch_id) REFERENCES moltrack.batches (id);

ALTER TABLE moltrack.assay_results ADD FOREIGN KEY (assay_id) REFERENCES moltrack.assays (id);

ALTER TABLE moltrack.assay_results ADD FOREIGN KEY (property_id) REFERENCES moltrack.properties (id);

ALTER TABLE moltrack.users ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.users ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.properties ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.properties ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.synonym_types ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.synonym_types ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.compounds ADD FOREIGN KEY (deleted_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.compounds ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.compounds ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.compound_synonyms ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.compound_synonyms ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.compound_details ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.compound_details ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.additions ADD FOREIGN KEY (deleted_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.additions ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.additions ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.batches ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.batches ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.batch_additions ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.batch_additions ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.batch_synonyms ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.batch_synonyms ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.assay_types ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.assay_types ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.assays ADD FOREIGN KEY (created_by) REFERENCES moltrack.users (id);

ALTER TABLE moltrack.assays ADD FOREIGN KEY (updated_by) REFERENCES moltrack.users (id);
